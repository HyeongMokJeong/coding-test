class Solution {
    public int solution(int n, int[] tops) {
        // 아래 방향 정삼각형은 항상 덮어야 한다
        // a[k] = k번째 아래 방향 정삼각형까지 오른쪽 정삼각형과 함께 덮는 경우
        // b[k] = k번째 아래 방향 정삼각형까지 덮되, 오른쪽 정삼각형은 덮지 않는 경우
        // -> 오른쪽 정삼각형을 덮으면 다음 삼각형에서 덮을 수 있는 경우의 수가 줄어든다
        int[] a = new int[n + 1];
        int[] b = new int[n + 1];

        a[1] = 1;
        // 아래 방향 정삼각형 위에 정삼각형이 없으면 가짓수가 2가지로 줄어든다.
        b[1] = (tops[0] == 1) ? 3 : 2;

        for (int i = 2; i <= n; i++) {
            // a[i]는 i-1번째 정삼각형이 오른쪽 정삼각형을 덮었은 안덮었든 적용 가능하다.
            a[i] = (a[i - 1] + b[i - 1]) % 10007;

            // i번째 아래 방향 정삼각형 위에 정삼각형이 붙은 경우
            if (tops[i - 1] == 1) {
                // a[i - 1]의 경우에는 정삼각형 하나가 덮혔기 때문에 2가지 방법이 가능하다.
                // b[i - 1]의 경우에는 세 가지 경우 모두 가능하다.
                b[i] = (2 * a[i - 1] + 3 * b[i - 1]) % 10007;
            } else {
                // a[i - 1]의 경우에는 1가지(정삼각형 하나로만 덮는 경우)만 가능하다.
                // b[i - 1]의 경우에는 2가지(정삼각형, 왼쪽과 함께)
                b[i] = (a[i - 1] + 2 * b[i - 1]) % 10007;
            }
        }
        return (a[n] + b[n]) % 10007;
    }
}