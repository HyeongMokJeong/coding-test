import java.util.Set;
import java.util.HashSet;

class Solution {
    int answer = 0;
    public int solution(int[][] points, int[][] routes) {
        Set<Integer>[][] matrix = new HashSet[101][101];
        for (int i = 0; i < 101; i++) {
            for (int j = 0; j < 101; j++) matrix[i][j] = new HashSet<>();
        }

        for (int i = 0; i < routes.length; i++) {
            int[] target = routes[i];
            int temp = target[0] - 1;
            for (int j = 1; j < target.length; j++) {
                int next = target[j] - 1;

                move(points[temp][0], points[temp][1], points[next][0], points[next][1], matrix);
            }
        }

        return answer;
    }

    private void move(int x1, int y1, int x2, int y2, Set<Integer>[][] matrix) {
        int time = 1;
    
        while (x1 != x2 || y1 != y2) {
            if (x1 < x2) x1++;
            else if (x1 > x2) x1--;
            else if (y1 < y2) y1++;
            else if (y1 > y2) y1--;
    
            Set<Integer> target = matrix[x1][y1];
            if (target.contains(time) && !target.contains(-1)) {
                answer += 1;
                target.add(-1);
            }
            target.add(time++);
        }
    }
}